<?xml version="1.0" encoding="UTF-8" ?> <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yang.mybatis.dao.EmployeeMapper">
    <!--
        namespace:命名空间,若想将接口和配置文件进行绑定，需要将namespace指定为接口的全类名
        id:唯一标识,绑定接口后可以用方法名绑定sql语句
        resultType:返回值类型
        #{id}从传递过来的参数取出id值
    -->
    <!--<select id="getEmployeeById" resultType="employee">-->
        <!--select * from tbl_employee where id = #{id}-->
    <!--</select>-->

    <select id="getEmployeeById" resultType="employee" >
        select employee_id id,last_name lastName,email  from employees where employee_id = #{id}
    </select>



    <!--parameterType  参数类型，可以省略-->
    <!--void  addEmployee(Employee employee);
    mysql支持自增主键，自增主键的获取，mybatis也是利用statement.getGeneratedKeys()
    useGeneratedKeys="true" 使用自增主键策略
    keyProperty,指定对应的主属性，也就是，mybatis获取到主键值以后，将这个值封装给Javabean的哪个属性
   -->
    <insert id="addEmployee" parameterType="employee" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee(last_name,email,gender)
        values (#{lastName},#{email},#{gender})
    </insert>

    <!--Oracle不支持自增主键:Oracle使用序列来模拟自增
         每次插入数据的主键是从序列中拿到的值-->

    <!--void updateEmp(Employee employee);-->
    <update id="updateEmp">
        update tbl_employee
        set last_name=#{lastName},email=#{email},gender=#{gender}
        where id = #{id}
    </update>

    <!-- void deleteEmpById(Integer id);-->
    <delete id="deleteEmpById">
        delete from tbl_employee where id = #{id}
    </delete>


</mapper>